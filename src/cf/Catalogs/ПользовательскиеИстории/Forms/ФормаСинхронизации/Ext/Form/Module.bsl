
&НаКлиенте
Перем ВариантыОбъединения;

&НаКлиенте
Процедура Синхронизировать(Команда)
	Если ВариантОбъединения.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран вариант объединения! Синхронизация прервана.";
		Сообщение.Поле = "ВариантОбъединения";
		Сообщение.Сообщить();	
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.Настраиваемый Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Вариант объединения ""Настраиваемый"" в разработке. Следите за обновлениями.";
		Сообщение.Сообщить();	
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.СозданиеFeatureФайла Тогда
		СоздатьФичу();
		
	ИначеЕсли ВариантОбъединения = ВариантыОбъединения.СозданиеПользовательскойИстории Тогда
		СоздатьПользовательскуюИсторию();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФичу() 
	ШаблонФичи = ОбщегоНазначениеКлиент.ПолучитьШаблонФичи();
	
	ПутьКФиче = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	
	НетОшибок = Истина;
	ЗаполнитьШаблон(ПользовательскаяИстория, ШаблонФичи, НетОшибок);
	
	Если НетОшибок Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		ТекстовыйДокумент.УстановитьТекст(ШаблонФичи);
		
		ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения("ВыгрузитьИзФормыЭлементаЗавершение", ЭтотОбъект), ПутьКФиче, КодировкаТекста.UTF8);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеНастроек(Поле) 
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Поле", Поле);
	
	НайденыеСтроки = НастройкиСинхронизации.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденыеСтроки[0].ЗначениеВAgiler;
КонецФункции

&НаКлиенте
Процедура СоздатьПользовательскуюИсторию()
	Если Не КолонкаВзятьИзAgilerЗаполнена() Тогда
		Возврат;		
	КонецЕсли;
	
	СоздатьПользовательскуюИсториюИЗаполнитьНастройкиСинхронизации();
КонецПроцедуры

&НаКлиенте
Функция КолонкаВзятьИзAgilerЗаполнена()
	Результат = Истина;
	
	Текст = "Не заполнены обязательные строки из колонки ""agile""";
	
	ПоляИсключения = Новый Массив;
	
	ПоляИсключения.Добавить(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер"));
	ПоляИсключения.Добавить(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь"));
	ПоляИсключения.Добавить(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Заголовок"));
	
	ПерваяСтрока = Истина;
	
	Для Каждого Строка Из НастройкиСинхронизации Цикл
		Если ЭтоПолеВИсключениях(Строка.Поле, ПоляИсключения) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Строка.ЗначениеВAgiler) Тогда
			Результат = Ложь;
			
			Текст = Текст + ?(ПерваяСтрока, ": ", "; ")  + Строка.Поле;
			
			ПерваяСтрока = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + ". Синхронизация прервана!";
	
	Если Не Результат Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();	
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СоздатьПользовательскуюИсториюИЗаполнитьНастройкиСинхронизации()
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	НоваяПользовательскаяИстория = Справочники.ПользовательскиеИстории.СоздатьЭлемент();
	
	НоваяПользовательскаяИстория.УстановитьНовыйКод();
	НоваяПользовательскаяИстория.Владелец = БизнесЦель;
	
	Для Каждого Строка Из НастройкиСинхронизацииНаСервере Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			НоваяПользовательскаяИстория.ПутьКФиче = Строка.ЗначениеВFeature;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			НоваяПользовательскаяИстория.Заголовок = Строка.ЗначениеВFeature;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Персона Тогда
			НоваяПользовательскаяИстория.Персона = Строка.ЗначениеВAgiler;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Функциональность Тогда
			НоваяПользовательскаяИстория.НеобходимыйФункционал = Строка.ЗначениеВAgiler;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.КлючевоеДействие Тогда
			НоваяПользовательскаяИстория.КлючевоеДействие = Строка.ЗначениеВAgiler;
			
		КонецЕсли;
	КонецЦикла;
	
	НоваяПользовательскаяИстория.Записать();
	
	ПользовательскаяИстория = НоваяПользовательскаяИстория.Ссылка;
	
	Для Каждого Строка Из НастройкиСинхронизацииНаСервере Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Номер Тогда
			Строка.ЗначениеВAgiler = НоваяПользовательскаяИстория.НомерФичи;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			Строка.ЗначениеВAgiler = НоваяПользовательскаяИстория.Заголовок;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			Строка.ЗначениеВAgiler = НоваяПользовательскаяИстория.ПутьКФиче;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПолеВИсключениях(ТекущееПоле, ПоляИсключения)
	Результат = Истина;
	
	ИскомоеПоле = ПоляИсключения.Найти(ТекущееПоле);
	Если ИскомоеПоле = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура НайтиFeatureБезНомера(Команда)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Выполняеться поиск фичи без номера, первая попавшаяся загружается сюда, для синхронизации";
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СоздатьПоляНастроекСинхронизации();
	ЗаполнитьРеквизитыФормыИзПараметров();
	ЗагрузитьТекущийЭлементВНастройки();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыИзПараметров()
	ИменаЗаполняемыхРеквизитов = Новый Массив;
	
	ИменаЗаполняемыхРеквизитов.Добавить("БизнесЦель");
	ИменаЗаполняемыхРеквизитов.Добавить("ПользовательскаяИстория");
	
	Для Каждого ИмяЗаполняемогоРеквизита Из ИменаЗаполняемыхРеквизитов Цикл
		Если Параметры.Свойство(ИмяЗаполняемогоРеквизита) Тогда
			ЭтаФорма[ИмяЗаполняемогоРеквизита] = Параметры[ИмяЗаполняемогоРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	//---
	
	Если ЗначениеЗаполнено(ПользовательскаяИстория) Тогда
		БизнесЦель = ПользовательскаяИстория.Владелец;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьПоляНастроекСинхронизации()
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Заголовок, "");
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Путь, "");
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Номер, "");
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Персона, Справочники.Персоны.ПустаяСсылка());
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.Функциональность, Справочники.Функциональности.ПустаяСсылка());
	СоздатьПолеНастроекСинхронизации(НастройкиСинхронизацииНаСервере, Перечисления.ПоляСинхронизации.КлючевоеДействие, Справочники.КлючевыеДействия.ПустаяСсылка());
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьЗначенияКолонок(Элемент)
	Если Элемент.ТекущийЭлемент.Имя = "НастройкиСинхронизацииЗначениеВAgiler" Тогда
		ТекущийТип = ТипЗнч(Элемент.ТекущиеДанные.ЗначениеВAgiler);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТекущийТип);
		
		Элемент.ТекущийЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		Элемент.ТекущийЭлемент.ВыбиратьТип = Ложь;
		
		Если ТекущийТип = Тип("Строка") Тогда
			Элемент.ТекущийЭлемент.КнопкаВыбора = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьПолеНастроекСинхронизации(Таблица, Поле, Значение)
	НоваяСтрока = Таблица.Добавить();
	
	НоваяСтрока.Поле = Поле;
	НоваяСтрока.ЗначениеВAgiler = Значение;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТекущийЭлементВНастройки()
	Если Не ЗначениеЗаполнено(ПользовательскаяИстория) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиСинхронизацииНаСервере = РеквизитФормыВЗначение("НастройкиСинхронизации");
	
	Для Каждого Строка Из НастройкиСинхронизацииНаСервере Цикл
		Если Строка.Поле = Перечисления.ПоляСинхронизации.Заголовок Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.Заголовок;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Путь Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.ПутьКФиче;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Номер Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.НомерФичи;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Персона Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.Персона;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.Функциональность Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.НеобходимыйФункционал;
			
		ИначеЕсли Строка.Поле = Перечисления.ПоляСинхронизации.КлючевоеДействие Тогда
			Строка.ЗначениеВAgiler = ПользовательскаяИстория.КлючевоеДействие;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(НастройкиСинхронизацииНаСервере, "НастройкиСинхронизации");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииПередНачаломИзменения(Элемент, Отказ)
	ОпределитьЗначенияКолонок(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииЗначениеВAgilerНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЭлементаЗавершение(ЗаписанУспешно, ДополнительныеПараметры) Экспорт
	Если ЗаписанУспешно Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Feature файл создан.";
		Сообщение.Сообщить();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблон(ТекущийЭлемент, ШаблонФичи, НетОшибок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеИстории.НомерФичи,
	|	ПользовательскиеИстории.Заголовок,
	|	ПользовательскиеИстории.Персона,
	|	ПользовательскиеИстории.КлючевоеДействие,
	|	ПользовательскиеИстории.НеобходимыйФункционал
	|ИЗ
	|	Справочник.ПользовательскиеИстории КАК ПользовательскиеИстории
	|ГДЕ
	|	ПользовательскиеИстории.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийЭлемент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НетОшибок = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#Номер", ВыборкаДетальныеЗаписи.НомерФичи);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#Заголовок", ВыборкаДетальныеЗаписи.Заголовок);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#Персона", ВыборкаДетальныеЗаписи.Персона);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#КлючевоеДействие", ВыборкаДетальныеЗаписи.КлючевоеДействие);
	ШаблонФичи = СтрЗаменить(ШаблонФичи, "#НеобходимыйФункционал", ВыборкаДетальныеЗаписи.НеобходимыйФункционал);
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбъединенияПриИзменении(Элемент)
	ОпределитьРежимОбъединения();
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРежимОбъединения() 
	Если ВариантОбъединения = ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.Настраиваемый") Тогда
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = Неопределено;
		КонецЦикла;
		
		ДоступностьКолонки = Истина;
		
	ИначеЕсли ВариантОбъединения = ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеFeatureФайла") Тогда
		РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзAgiler");
		
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = РежимОбъединения;
		КонецЦикла;
		
		ДоступностьКолонки = Ложь;
		
	ИначеЕсли ВариантОбъединения = ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеПользовательскойИстории") Тогда
		РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзFeature");
		
		Для Каждого Строка Из НастройкиСинхронизации Цикл
			Строка.РежимОбъединения = РежимОбъединения;
			
			Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер") Тогда
				Строка.РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.НеОбъединять");
				
			ИначеЕсли Ложь
				Или Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Персона")
				Или Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.КлючевоеДействие")
				Или Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Функциональность")
				Тогда
				
				Строка.РежимОбъединения = ПредопределенноеЗначение("Перечисление.РежимыОбъединения.ВзятьИзAgiler");
				
			КонецЕсли;
		КонецЦикла;
		
		ДоступностьКолонки = Ложь;
		
	КонецЕсли;
	
	Элементы.НастройкиСинхронизацииРежимОбъединения.Доступность = ДоступностьКолонки;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьFeature(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Каталог = ОбщегоНазначениеСервер.ПолучитьКаталогПроекта(БизнесЦель);
	ДиалогВыбораФайла.Фильтр = "feature|*.feature";
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыбратьFeatureФайлЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьFeatureФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Фича = ПрочитатьФичу(ВыбранныеФайлы[0]);
	
	Для Каждого Строка Из НастройкиСинхронизации Цикл
		Если Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Путь") Тогда
			Строка.ЗначениеВFeature = Фича.Путь;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер") Тогда
			Строка.ЗначениеВFeature = Фича.Номер;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Заголовок") Тогда
			Строка.ЗначениеВFeature = Фича.Заголовок;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Персона") Тогда
			Строка.ЗначениеВFeature = Фича.Персона;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Функциональность") Тогда
			Строка.ЗначениеВFeature = Фича.Функциональность;
			
		ИначеЕсли Строка.Поле = ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.КлючевоеДействие") Тогда
			Строка.ЗначениеВFeature = Фича.КлючевоеДействие;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФичу(ВыбранныйФайл)
	Фича = ПодготовитьФичу();
	
	Фича.Путь = ВыбранныйФайл;
	
	ТекстФичи = Новый ЧтениеТекста(ВыбранныйФайл, КодировкаТекста.UTF8);
	
	Пробел = " ";
	
	ИскомыеКлючевыеСлова = Новый Массив;
	
	ИскомыеКлючевыеСлова.Добавить("Функционал");
	ИскомыеКлючевыеСлова.Добавить("Функциональность");
	ИскомыеКлючевыеСлова.Добавить("Как");
	ИскомыеКлючевыеСлова.Добавить("Я хочу");
	ИскомыеКлючевыеСлова.Добавить("Хочу");
	ИскомыеКлючевыеСлова.Добавить("Чтобы");
	
	ИскомыеКлючевыеСлова.Добавить("Функционал:");
	ИскомыеКлючевыеСлова.Добавить("Функциональность:");
	ИскомыеКлючевыеСлова.Добавить("Как:");
	ИскомыеКлючевыеСлова.Добавить("Я хочу:");
	ИскомыеКлючевыеСлова.Добавить("Хочу:");
	ИскомыеКлючевыеСлова.Добавить("Чтобы:");
	
	ТегНумерации = ОбщегоНазначениеКлиент.ПолучитьТегНумерации();
	
	ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
	Пока Не ТекущаяСтрока = Неопределено Цикл
		ТекущаяСтрока = УбратьЛишниеПробелыИТабы(ТекущаяСтрока);
		
		Если СтрНайти(ТекущаяСтрока, ТегНумерации) > 0 Тогда
			Фича.Номер = СтрЗаменить(ТекущаяСтрока, ТегНумерации, "");
			
			ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
			
			Продолжить;
		КонецЕсли;
		
		ПервыйПробел = СтрНайти(ТекущаяСтрока, " ",,, 1);
		ТекущееКлючевоеСлово = СокрЛП(Лев(ТекущаяСтрока, ПервыйПробел));
		
		ВторойПробел = СтрНайти(ТекущаяСтрока, " ",,, 2);
		ТекущееСловосочетаник = СокрЛП(Лев(ТекущаяСтрока, ВторойПробел));
		
		ОставшаясяЧасть = СокрЛП(Сред(ТекущаяСтрока, ПервыйПробел));
		
		Для Каждого ИскомоеКлючевоеСлово Из ИскомыеКлючевыеСлова Цикл
			Если ТекущееКлючевоеСлово = ИскомоеКлючевоеСлово Тогда
				Если Ложь
					Или ТекущееКлючевоеСлово = "Функционал"
					Или ТекущееКлючевоеСлово = "Функциональность"
					Или ТекущееКлючевоеСлово = "Функционал:"
					Или ТекущееКлючевоеСлово = "Функциональность:"
					Тогда
					
					Фича.Заголовок = ОставшаясяЧасть;
					
				ИначеЕсли Ложь
					Или ТекущееКлючевоеСлово = "Как"
					Или ТекущееКлючевоеСлово = "Как:"
					Тогда
					
					Фича.Персона = ОставшаясяЧасть;
					
				ИначеЕсли Ложь
					Или ТекущееКлючевоеСлово = "Хочу"
					Или ТекущееКлючевоеСлово = "Хочу:"
					Тогда
					
					Фича.Функциональность = ОставшаясяЧасть;
					
				ИначеЕсли Ложь
					Или ТекущееКлючевоеСлово = "Чтобы"
					Или ТекущееКлючевоеСлово = "Чтобы:"
					Тогда
					
					Фича.КлючевоеДействие = ОставшаясяЧасть;
					
				КонецЕсли;
				
			ИначеЕсли ТекущееСловосочетаник = ИскомоеКлючевоеСлово Тогда
				Если Ложь
					Или ТекущееКлючевоеСлово = "Я хочу"
					Или ТекущееКлючевоеСлово = "Я хочу:"
					Тогда
					
					Фича.Функциональность = ОставшаясяЧасть;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		//-
		
		ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат Фича;
КонецФункции

&НаКлиенте
Функция УбратьЛишниеПробелыИТабы(Знач Строка) 
	Строка = СтрЗаменить(Строка, Символы.Таб, "");
	Строка = СокрЛП(Строка);
	
	КоличествоПробелов = 0;
	Пробел = " ";
	НеразрывныйПробел = Символы.НПП;
	НоваяСтрока = "";
	
	Пока Не ПустаяСтрока(Строка) Цикл
		ТекущийСимвол = Лев(Строка, 1);
		Если Ложь
			Или ТекущийСимвол = Пробел
			Или ТекущийСимвол = НеразрывныйПробел
			Тогда
			
			КоличествоПробелов = КоличествоПробелов + 1;
			
		Иначе
			КоличествоПробелов = 0;	
			
		КонецЕсли;
		
		Если Не КоличествоПробелов > 1 Тогда
			НоваяСтрока = НоваяСтрока + ТекущийСимвол;
		КонецЕсли;
		
		Строка = Сред(Строка, 2);
	КонецЦикла;
	
	Возврат НоваяСтрока;
КонецФункции

&НаКлиенте
Функция ПодготовитьФичу()
	Фича = Новый Структура;
	
	Фича.Вставить("Заголовок");
	Фича.Вставить("Путь");
	Фича.Вставить("Номер");
	Фича.Вставить("Персона");
	Фича.Вставить("Функциональность");
	Фича.Вставить("КлючевоеДействие");
	
	Возврат Фича;
КонецФункции

&НаКлиенте
Процедура НайтиFeatureПоНомеру(Команда)
	КаталогПроекта = ОбщегоНазначениеСервер.ПолучитьКаталогПроекта(БизнесЦель);
	
	ПараметрыПоиска = Новый Структура;
	
	НомерФичи = ПолучитьЗначениеНастроек(ПредопределенноеЗначение("Перечисление.ПоляСинхронизации.Номер"));
	
	ПараметрыПоиска.Вставить("НомерФичи", НомерФичи);
	ПараметрыПоиска.Вставить("ВариантПоиска", "НайтиПоНомеру");
	
	ТегНумерации = ОбщегоНазначениеКлиент.ПолучитьТегНумерации();
	
	ПараметрыПоиска.Вставить("ТегНумерации", ТегНумерации);
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("НайтиВсеФичиВКаталогеПроектаЗавершение", ЭтотОбъект, ПараметрыПоиска), КаталогПроекта, "*.feature", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НайтиВсеФичиВКаталогеПроектаЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	Если Ложь
		Или НайденныеФайлы = Неопределено
		Или НайденныеФайлы.Количество() = 0
		Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найдены feature файлы.";
		Сообщение.Сообщить();	

		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВариантПоиска = "НайтиПоНомеру" Тогда
		НайтиФичуПоНомеру(НайденныеФайлы, ДополнительныеПараметры);
		
	ИначеЕсли ДополнительныеПараметры.ВариантПоиска = "НайтиБезНомера" Тогда
		НайтиФичуБезНомера(НайденныеФайлы, ДополнительныеПараметры);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиФичуПоНомеру(НайденныеФайлы, ДополнительныеПараметры)
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Файл = НайденныйФайл.ПолноеИмя;
		
		ТекстФичи = Новый ЧтениеТекста(Файл, КодировкаТекста.UTF8);
		
		ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
		Пока Не ТекущаяСтрока = Неопределено Цикл
			Если СтрНайти(ТекущаяСтрока, ДополнительныеПараметры.ТегНумерации) > 0 Тогда
				НайденныйНомер = СокрЛП(СтрЗаменить(ТекущаяСтрока, ДополнительныеПараметры.ТегНумерации, ""));
				Если НайденныйНомер = ДополнительныеПараметры.НомерФичи Тогда
					ВыбранныеФайлы = Новый Массив;
					
					ВыбранныеФайлы.Добавить(Файл);
					
					ВыбратьFeatureФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры);
				КонецЕсли;
			КонецЕсли;

			//---
			ТекущаяСтрока = ТекстФичи.ПрочитатьСтроку();
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НайтиФичуБезНомера(НайденныеФайлы, ДополнительныеПараметры) 

КонецПроцедуры

//---

ВариантыОбъединения = Новый Структура;

ВариантыОбъединения.Вставить("Настраиваемый", ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.Настраиваемый"));
ВариантыОбъединения.Вставить("СозданиеFeatureФайла", ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеFeatureФайла"));
ВариантыОбъединения.Вставить("СозданиеПользовательскойИстории", ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.СозданиеПользовательскойИстории"));
ВариантыОбъединения.Вставить("ОбновлениеНомераПользовательскойИсторииВФиче", ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.ОбновлениеНомераПользовательскойИсторииВФиче"));
ВариантыОбъединения.Вставить("ОбновлениеПутиКФичеВПользовательскойИстории", ПредопределенноеЗначение("Перечисление.ВариантыОбъединения.ОбновлениеПутиКФичеВПользовательскойИстории"));

